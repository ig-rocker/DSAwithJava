
Search for Duplicate Sorted & Roatated Array:

    For duplicate elements , always try to solve them using unique & search where the unique is failing for certain test cases & try to fit for that scenario.

    So, for duplicate we will fail for the condition where we are unable to find the sorted side.
    [3,3,3,1,3,3,3,,3,3,3,3]

    For this one , the mid elememnt will contain the elememnt value 3 which is same as the left most side, and right most side so we cant able to identify the sorted side.

    At that time, what we can do is shrink the low & high and continue the loop.

    TIME complexity : At worst case we are nearly shrinking half of array i.e, ~O(N/2) so worst time complexity will be O(N)
                        for most of cases, it will follow the binary search complexity 
    Space complexity : O(1)
    
CODE:

public boolean search(int[] nums, int target) {
        int start=0, end=nums.length-1,mid;
        while(start<=end){
            mid=(start+end)/2;
            if(nums[mid]==target){
                return true;
            }
            if(nums[mid]==nums[start] && nums[mid]==nums[end]){
                start++;
                end--;
                continue;
            }
            else if(nums[start]<=nums[mid]){
                if(nums[start]<=target && target<nums[mid]){
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
            else{
                if(nums[mid]<target && target<=nums[end]){
                    start=mid+1;
                }
                else{
                    end=mid-1;
                }
            }

        }
        return false;
    }