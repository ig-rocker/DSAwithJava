In this firstly, we need to look for the pivot point from where the array rotated.

To find pivot point:
* For sorted aray, the pivot point is only element whose next element is smaller than it
* For

1. Find the mid
2. check for the sorted half by comparing mid index value with left and right value
    We get to know that if arr[start]<=arr[mid], then left side is sorted otherwise right side is sorted.

3. Now, we identify the target element is present in the sorted side or not. and put the conditions accordingly.



public int search(int[] nums, int target) {
        int start=0, end=nums.length-1,mid;
        while(start<=end){
            mid=(start+end)/2;
            if(nums[mid]==target){
                    return mid;
            }
            if(nums[mid]>=nums[start]){
                 if(target>=nums[start] && target<=nums[mid]){
                     end=mid-1;
                 }
                 else{
                     start=mid+1;
                 }
            }
            else{
                if(target>=nums[mid] && target<=nums[end]){
                    start=mid+1;
                }
                else{
                    end=mid-1;
                }
            }
        }
        return -1;
    }

TIME COMPLEXITY-->O(logN)
SPACE COMPLEXITY-->O(N)
EXTRA SPACE COMPLEXITY-->O(1)


##############################################



    Code:
